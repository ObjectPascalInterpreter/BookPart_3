//import testUtils

//setColor("yellow")
//println ("--------------------- Array Tests ----------------------")
//setColor("white")

//testUtils.beginTests ("Add tests")
  a = array([1,2,3])
  //testUtils.runtestTrue(a + 1 == array([2,3,4]))  
  //testUtils.runtestTrue(a + 1.0 == array([2,3,4])) 
  //testUtils.runtestTrue(1 + a == array([2,3,4])) 
  //testUtils.runtestTrue(1.0 + a == array([2,3,4]))   
  //testUtils.runtestTrue(math.pi + a == array([4.14159265358979, 5.14159265358979, 6.14159265358979]))    
//  testUtils.runtestTrue(a + math.pi == array([4.14159265358979, 5.14159265358979, 6.14159265358979]))  
//testUtils.endTests()

testUtils.beginTests ("Sub tests")
  a = array([1,2,3])
  testUtils.runtestTrue(a - 1 == array([0,1,2]))  
  testUtils.runtestTrue(a - 1.0 == array([0,1,2])) 
  testUtils.runtestTrue(1 - a == array([0,-1,-2])) 
  testUtils.runtestTrue(1.0 - a == array([0,-1,-2])) 
  testUtils.runtestTrue(1.0 - a == array([0,-1,-2])) 
  testUtils.runtestTrue(math.pi - a == array([2.14159265358979, 1.14159265358979, 0.141592653589793]))    
  testUtils.runtestTrue(a - math.pi == array([-2.14159265358979, -1.14159265358979, -0.141592653589793]))  
testUtils.endTests()

testUtils.beginTests ("Mult tests")
  a = array([1,2,3])
  testUtils.runtestTrue(a * 2 == array([2,4,6]))  
  testUtils.runtestTrue(a * 2.0 == array([2,4,6])) 
  testUtils.runtestTrue(2 * a == array([2,4,6])) 
  testUtils.runtestTrue(2.0 * a == array([2,4,6]))   
  testUtils.runtestTrue(math.pi * a == array([3.14159265358979, 6.28318530717959, 9.42477796076938]))    
  testUtils.runtestTrue(a * math.pi == array([3.14159265358979, 6.28318530717959, 9.42477796076938]))  
testUtils.endTests()

testUtils.beginTests ("Div tests")
  a = array([1,2,3])
  testUtils.runtestTrue(a / 2 == array([0.5,1,1.5]))  
  testUtils.runtestTrue(a / 2.0 == array([0.5,1,1.5])) 
  testUtils.runtestTrue(2 / a == array([2,1,2/3])) 
  testUtils.runtestTrue(2.0 / a == array([2,1,2/3]))   
  testUtils.runtestTrue(math.pi / a == array([3.14159265358979, 1.5707963267949, 1.0471975511966]))    
  testUtils.runtestTrue(a / math.pi == array([0.318309886183791, 0.636619772367581, 0.954929658551372]))  
testUtils.endTests()

testUtils.beginTests ("Shape tests")
  a = array([1,2,3])
  testUtils.runtestTrue(a.shape() == [3]);
  a = array([[1,4,5]])
  testUtils.runtestTrue(a.shape() == [1,3])
  a = array([[1,2],[4,5]])
  testUtils.runtestTrue(a.shape() == [2,2])
  a = array([[1],[4],[5]])
  testUtils.runtestTrue(a.shape() == [3,1])
  a = array([[1]])
  testUtils.runtestTrue(a.shape() == [1,1])
testUtils.endTests()

a = array([1, 2, 3]); 
b = array ([8, 6, 4])
c = array ([9, 8, 7])


testUtils.beginTests ("Complex Arithmetic")
  testUtils.runtestTrue(a.len() == 3)  
  testUtils.runtestTrue(a + b - c == array([0, 0, 0]))
  a = array([1, 2, 3]); 
  b = array([8, 6, 4])
  c = array([-7, -4, -1])
  testUtils.runtestTrue(a - b - c == array([0, 0, 0]))
  a = array([1, 2, 3]); 
  b = array([8, 6, 4]);
  c = array([8, 12, 12])
  testUtils.runtestTrue(a * b == c)  

  a = array([[1,2,3],[4,5,6],[7,8,9]])
  b = array([[4,5,6],[7,8,9],[10,11,12]])
  c = array([[5,  7,  9],
            [11, 13, 15],
            [17, 19, 21]])
  testUtils.runtestTrue(a + b == c)              

  c = array([[-3,-3, -3],
            [-3, -3, -3],
            [-3, -3, -3]])
  testUtils.runtestTrue(a - b == c)   

  c = array([[4,  10,  18],
            [28, 40, 54],
            [70, 88, 108]])
  testUtils.runtestTrue(a * b == c)  
testUtils.endTests()

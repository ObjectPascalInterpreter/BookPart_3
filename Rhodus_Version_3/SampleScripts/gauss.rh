

function swapRow(A, b, r1, r2, n)

  if (r1 != r2) then 

    for i = 0 to n - 1 do
      p1 = A[r1, i]
      p2 = A[r2, i]
      tmp = p1; p1 = p2; p2 = tmp
    end

    for j = r1 to n - 1 do
        temp = A[r1,j];
        A[r1,j] = A[r2,j];
        A[r2,j] = temp;
    end;

    tmp = b[r1]; b[r1] = b[r2]; b[r2] = tmp
  end
end



function gauss_eliminate(A, b, x, n)

  for k = 0 to n - 1 do 
      max = math.abs (A[k, k])
      max_row = k 

      for row = k+ 1 to n - 1 do
         tmp = math.abs(A[row, k])
         if (tmp > max) then
            max_row = row; max = tmp
         end
      end

      swapRow(A, b, k, max_row, n)

      for row = k + 1 to n - 1 do 
         tmp = A[row, k] / A[k, k]
         for col = k+1 to n - 1 do
             A[row, col] = A[row, col] - tmp * A[k, col]
         end
         A[row, k] = 0
         b[row] = b[row] - tmp * b[k];
      end
  end

  println ("Back subsitution")
  for row = n - 1 downto 0 do 
      tmp = b[row];
      for j = n - 1 downto row do
        tmp = tmp - x[j] * A[row, j]
      end
      x[row] = tmp / A[row, row]
  end
end




// Taken from Delphi version from Rosetta code

// Solve A x = b
function gauss (A, b, x)

  rowx = 0  // Keep count of the row interchanges
  n = A.len() - 1 // ignore first row

  for k = 1 to n - 1 do

      amax = math.abs (A[k,k])
      m = k;
      // Find the row with largest pivot
      for i = k + 1 to n do
          xfac = math.abs (A[i,k]);
          if xfac > amax then
             amax = xfac;
             m = i;
          end
      end

      if m != k then
         // Row interchanges
         rowx = rowx+1;
         temp1 = b[k];
         b[k] = b[m];
         b[m]  = temp1;
         for j = k to n do
             temp = A[k,j];
             A[k,j] = A[m,j];
             A[m,j] = temp;
         end;
      end;

      for i = k+1 to n do
          xfac = A[i, k]/A[k, k];
          for j = k+1 to n do
              A[i,j] = A[i,j] - xfac*A[k,j];
          end
          b[i] = b[i] - xfac*b[k]
      end;
  end

  // Back substitution
  for j = 1 to n do
      k = n-j + 1
      x[k] = b[k]
      for i = k+1 to n do
          x[k] = x[k] - A[k,i]*x[i]
      end
      x[k] = x[k]/A[k,k]
  end
end



// Create the A matrix
A = {{0,0,0,0,0},
     {0,0,0,0,0},
     {0,0,0,0,0},
     {0,0,0,0,0},     
     {0,0,0,0,0}}

b = {0}*5
x = {0}*5
 
A[1,1] = 2; A[1,2] = 1; A[1,3] = 0; A[1,4] = 0;
A[2,1] = 1; A[2,2] = 1; A[2,3] = 1; A[2,4] = 0;
A[3,1] = 0; A[3,2] = 1; A[3,3] = 2; A[3,4] = 1;
A[4,1] = 0; A[4,2] = 0; A[4,3] = 1; A[4,4] = 2;

 
println (A)
b[1] = 2; b[2] = 1; b[3] = 4; b[4] = 8;
 
 
gauss (A, b, x);
 
println (x[1], ", ", x[2], ", ", x[3], ", ", x[4]);


println ("Second Method")

// Could have been done with simple arrays rather than a specific TMatrix class
A = {{0,0,0,0},
     {0,0,0,0},
     {0,0,0,0},     
     {0,0,0,0}}

b = {0}*4
x = {0}*4
 
A[0,0] = 2; A[0,1] = 1; A[0,2] = 0; A[0,3] = 0;
A[1,0] = 1; A[1,1] = 1; A[1,2] = 1; A[1,3] = 0;
A[2,0] = 0; A[2,1] = 1; A[2,2] = 2; A[2,3] = 1;
A[3,0] = 0; A[3,1] = 0; A[3,2] = 1; A[3,3] = 2;
 
println (A)
b[0] = 2; b[1] = 1; b[2] = 4; b[3] = 8;
 
gauss_eliminate(A, b, x, 4)
println ("Output results:")

println (x[0], ", ", x[1], ", ", x[2], ", ", x[3]);



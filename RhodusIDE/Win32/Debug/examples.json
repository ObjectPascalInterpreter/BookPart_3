{
   "examples": [ 
   { 
     "name": "Print method",
     "src": "println(\"This how you print things\")"
},
{
    "name": "Assignment",
"src": 
"a = 3
b = \"a string\"
c = 3.1415
d = False
e = [1,False, 5.67, [5,6]]
println (a)
println (b)
println (c)
println (d)
println (e)"
},
    {"name": "For Loop",
"src": 
"for i = 1 to 5 do
  println (i)
end

for i = 10 downto 1 do
   print (i, \" \")
end
"
    },
{
"name": "While loop",
"src":
"i = 5
while i >= 1 do
   println (i)
   i = i - 1
end
"
},
{
"name": "Repeat loop",
"src":
"i = 5
repeat
   println (i)
   i = i - 1
until i < 1
"
},
{
"name": "Arithmetic",
"src":
"a = 3.4; b = 7.8
println (-a, \" \", a/b, \" \", a*b, \" \")
println (a+b, \" \", a-b, \" \", a mod b, \" \", 12 div 5)
"
},
{
"name": "Math",
"src":
"import math
println (\"Pi constant = \", math.pi)
println (math.sin (math.pi))"
},
{
"name": "dir()",
"src":
"import math
println (math.dir())"
},
{
"name": "User functions",
"src":
"function callme (a, b)
    c = a + b
    return c
end

println (callme (2,3))
println (callme (\"Hello \", \"World\"))
"
},
{
"name": "Lists",
"src":
"a = [1,2,3,4]
println (a)
b = [True, False]
c = a + b
println (c)
a = [1,True,3.14,\"Rhodus\",[5,6,[8,9]]]
x = a[2]
println (x)
println (a[4,2])
a[4,2] = [\"abc\"]
println (a)
"
},
{
"name": "Arrays",
"src":
"a = array([1,2,3,4])
b = array([0]*20)

println (a.len())
println (b.len())
println (b)
"
},
{
"name": "Graphics",
"src":
"

import graphics

m = graphics.dir()
l = m.len()

column = 0
for i = 0 to l - 1 do
    print(strings.format (m[i], \"%-16s\"))
     column = column + 1
     column = column mod 3
     if column == 0 then
        println();
     end
end
println()
"
},
{
"name": "Square",
"src":
"
import graphics

graphics.clear()
delta = 100

function drawSquare (x, y, delta)
   graphics.moveto(x,y)
   graphics.lineto(x+delta,y)
   graphics.lineto(x+delta,y+delta)
   graphics.lineto(x,y+delta)
   graphics.lineto(x, y)
end

x = 50; y = 50
for i = 1 to 15 do
    drawSquare (x, y, delta)
    x = x + 10; y = y + 10   
end
"
},
{
"name": "Tree1",
"src":
"
import graphics
import math

x = 260; y = 600
heading = 270

function forward (distance)
  global x, y

  graphics.moveto(x,y)
  radians = heading*math.pi/180
  dx = math.cos (radians) * distance
  dy = math.sin (radians) * distance
  x = x + dx
  y = y + dy
  graphics.lineto(x,y)
end

function tree(branchLen)
    global heading
    if branchLen > 5 then
       forward(branchLen)
       heading = heading + 20
       tree(branchLen-15)
       heading = heading - 40
       tree(branchLen-15)
       heading = heading + 20
       forward(-branchLen)
    end
end

graphics.clear()
graphics.setPenColor(210,20,0)
dims = graphics.size()
x = dims[0]/2; y = dims[1]/1.5
graphics.moveto (x,y)
graphics.setPenWidth(2)
tree(115)
"
},
{
"name": "Tree2",
"src":
"
import graphics
import math

function drawTree(x1, y1, angle, depth)
    fork_angle = 20
    base_len = 10.0
    if depth > 0 then
        x2 = x1 + int(math.cos(math.toRadians(angle)) * depth * base_len)
        y2 = y1 + int(math.sin(math.toRadians(angle)) * depth * base_len)
        graphics.line (x1, y1, x2, y2)         
        drawTree(x2, y2, angle - fork_angle, depth - 1)
        drawTree(x2, y2, angle + fork_angle, depth - 1)
       end;
end

graphics.clear()
graphics.setPenColor(210,20,0)
graphics.setPenWidth(2)
dims = graphics.size()
drawTree(dims[0]/2, dims[1]/2, -90, 9)
 
"
},
{
"name": "Koch Curve",
"src":	
"
import graphics
import math

function kochCurve(x1, y1, x2, y2, order)
    if order == 0 then
       graphics.moveto (x1, y1)
       graphics.lineto (x2, y2)
    else
       dx = (x2 - x1) / 3.0
       dy = (y2 - y1) / 3.0

       x3 = x1 + dx
       y3 = y1 + dy

       x5 = x2 - dx
       y5 = y2 - dy    
       
       x4 = (x1 + x2) / 2 + math.sqrt(3) * (y1 - y2) / 6
       y4 = (y1 + y2) / 2 + math.sqrt(3) * (x2 - x1) / 6
       
       kochCurve(x1, y1, x3, y3, order - 1)
       kochCurve(x3, y3, x4, y4, order - 1)
       kochCurve(x4, y4, x5, y5, order - 1)
       kochCurve(x5, y5, x2, y2, order - 1)       
    end
end

graphics.clear()
graphics.setPenColor (\"blue\")
graphics.beginUpdate()
x_start = 100;y_start = 400
x_end  = 700; y_end = 400

order = 4  // Change this to increase/decrease the complexity
kochCurve(x_start, y_start, x_end, y_end, order)
graphics.endUpdate()
"
},
{
"name": "Dragon Curve",
"src":
"

import graphics
import math

x = 250; y = 200
angle = 45
    
function dragon(size, split, d)
   global x, y, angle
   if split == 0 then
      dx = -math.cos(angle)*size
      dy = math.sin(angle)*size
      x = x + dx; y = y + dy
      graphics.lineto (x, y)
   else
      angle = angle + d*3.14/4
      dragon(size/math.sqrt(2), split-1, 1)
      angle = angle - d*3.14/2
      dragon(size/math.sqrt(2), split-1, -1)
      angle = angle + d*3.14/4
   end
end

graphics.clear()
graphics.setPenColor (\"blue\")
graphics.beginUpdate()
graphics.moveto (x, y)
dragon (256, 12, 1)
graphics.endUpdate()
"
},
{
"name": "Circles",
"src":
"
import graphics
import math
import random

graphics.clear()
for i = 1 to 4 do
    for j = 1 to 4 do
        r = random.randint(255)
        g = random.randint(255)
        b = random.randint(255)
        graphics.setPenColor (r, g, b); 
        graphics.setBrushColor (r, g, b); 
        graphics.fillEllipse (j*80,i*100,70,70)  
    end
end
"
},
{
"name": "Lines",
"src":
"
import graphics
import math
import random

p = graphics.size()
width = p[0]; height = p[1]

graphics.clear()
for i = 1 to 100 do
   graphics.setPenWidth (3+random.randint(4))
   graphics.setPenColor(
       random.randint (255),
       random.randint (255),
       random.randint (255)
   )
   graphics.moveto(random.randint (width),random.randint (height))
   graphics.lineto(random.randint (width),random.randint (height))
end
"
},
{
"name": "Bezier",
"src":
"
import graphics
import math

function bezier(x1, y1, x2, y2, x3, y3, x4, y4, nseg)
  currx = 0; curry = 0
  graphics.setPenWidth (2)
  graphics.line (x1, y1, x2, y2)
  graphics.line (x4, y4, x3, y3)
  graphics.setPenWidth (4)
  graphics.filledCircle (x2, y2, 5)
  graphics.filledCircle (x3, y3, 5)
  graphics.setPenWidth (2)
  for i = 0 to nseg do
     t = i / nseg
     a = (1-t)^3 
     b = 3*t*(1-t)^2
     c =  3*t^2*(1-t)
     d = t^3
     prevx = currx 
     prevy = curry
     currx = math.floor(a * x1 + b * x2 + c * x3 + d * x4 + 0.5)
     curry = math.floor(a * y1 + b * y2 + c * y3 + d * y4 + 0.5)
     if i > 0 then
        graphics.line(prevx, prevy, currx, curry)
     end
  end
end
 
graphics.clear()
bezier(60, 120, 100, 250, 
       170, 120, 260, 250, 16)
"
},
{
"name": "Spiral",
"src":
"
// From spiral.go
import graphics
import math

s = 520
num = 600

graphics.clear()
graphics.setPenColor (\"red\")
graphics.setBrushColor (\"red\")

for i = 0 to num do 
    t = i / num 
    d = t*s*0.4 + 10
    a = t * math.pi * 2 * 20
    x = s/2 + math.cos(a)*d
    y = s/2 + math.sin(a)*d
    r = t * 8
    graphics.fillEllipse (x, y, r, r)
end"
},
{
"name": "Mandelbrot",
"src":
"
import graphics
import time

graphics.clear();

p = graphics.size()
kt = 319
itermax = 100;  // how many iterations to do  
width = p[0];   // horizonal resolution   
height= p[1];   // vertical resolution    

t1 = time.getTickCount()
for row = 0 to height - 1 do
    for col = 0 to width - 1 do
        c_re = (col - width/2.0)*4.0/width
        c_im = (row - height/2.0)*4.0/width
        x = 0; y = 0
        k = 0

        while (x*x+y*y <= 4) and (k < 319) do
            x_new = x*x - y*y + c_re;
            y = 2*x*y + c_im;
            x = x_new;
            k = k + 1
        end 

      if k < kt then
         if k < 16 then 
            graphics.setPenColor (k * 8, k * 8, 128 + k * 4)
         end
         if (k >= 16) and (k < 64) then 
            graphics.setPenColor (128 + k - 16, 128 + k - 16, 192 + k - 16)
         end
         if k >= 64 then 
            graphics.setPenColor (kt - k, 128 + (kt - k) / 2, kt - k)
         end 
         graphics.pixel (row, col)
      else 
         graphics.setBrushColor (1,1,1)
         graphics.setPenColor (1, 1, 1) 
         graphics.pixel (row, col)
      end
   end

  if row mod 50 == 0 then
     println (row)
  end
end
println (\"Done\");
println (\"Time = \", time.getTickCount() - t1, \" ms\")
"
},{
"name": "Colors",
"src":
"
import graphics
import math

colors = graphics.getColorNames() 

graphics.clear(\"white\")
x = 10; y = 10;
for i = 0 to colors.len() - 1 do
    graphics.setPenColor (colors[i])
    graphics.setBrushColor (colors[i])
    graphics.fillRect (x, y, 40, 40)
    x = x + 50
    if x > 600 then
       x = 10
       y = y + 50
    end
end
"
}
  ]
}
import testUtils
import math

// Simple Arithmetic tests

setColor ("yellow")
println ("------------------- Arithmetic Tests ---------------------")
setColor ("white")
testUtils.beginTests ("Equality")
  testUtils.runtestTrue (1E2 == 100);
  testUtils.runtestTrue (1.2E2 == 120); 
  testUtils.runtestTrue (0.1E2 == 10); 
  testUtils.runtestTrue (1E-2 == 0.01); 
  testUtils.runtestTrue (1.2E-2 == 0.012); 
  testUtils.runtestTrue (-1E-2 == -0.01);

  testUtils.runtestTrue (10 / 2 == 5);
  testUtils.runtestTrue (2^4 == 16);

  a = 2; b = 5;
  testUtils.runtestTrue  (a == 2);
  testUtils.runtestTrue  (b == 5);
testUtils.endTests()


testUtils.beginTests ("Integer Operators")
 // Integer tests
 a = 2; b = 5;
  testUtils.runtestTrue (2 + 3 == 5);
  testUtils.runtestTrue (2 - 3 == -1);
  testUtils.runtestTrue (3 - 2 == 1);
  testUtils.runtestTrue (2 * 3 == 6);
 testUtils.runtestTrue  (a + b == 7);
 testUtils.runtestTrue  (b + a == 7);  
 testUtils.runtestTrue  (a - b == -3); 
 testUtils.runtestTrue  (b - a == 3);
 testUtils.runtestTrue  (a * b == 10); 
 testUtils.runtestTrue  (b * a == 10); 
 testUtils.runtestTrue  (b / a == 2.5);
 testUtils.runtestTrue  (a / b == 0.4);
 testUtils.runtestTrue  (b div a == 2);  // div = integer divide 
 testUtils.runtestTrue  (b mod 1 == 0);
 testUtils.runtestTrue  (b mod 2 == 1);
 testUtils.runtestTrue  (b mod 3 == 2);
testUtils.endTests() 

testUtils.beginTests ("Double")
  // Double tests
  a = 2.5; b = 5.5;
  testUtils.runtestTrue (a + b == 8.0);  
  testUtils.runtestTrue (b + a == 8.0);  
  testUtils.runtestTrue (a - b == -3.0);
  testUtils.runtestTrue (b - a == 3.0);
  testUtils.runtestTrue (a * b == 13.75);
  testUtils.runtestTrue (b * a == 13.75); 
  testUtils.runtestTrue (b / a == 2.2); 
  b = 7.5;
  testUtils.runtestTrue (a / b == 1/3); 
  a = 1.5; b = 2.0;
  testUtils.runtestTrue (a^b == 2.25);

  a = 123.456;
  testUtils.runtestTrue (a == 123.456);
  a = 0.0001;
  testUtils.runtestTrue (a == 0.0001);
  a = -0.0001;
  testUtils.runtestTrue (a == -0.0001);
  a = 123.;
  testUtils.runtestTrue (a == 123.);
  a = 0.987;
  testUtils.runtestTrue (a == 0.987);

  // Mixed
  testUtils.runtestTrue (8 / 2.5 == 3.2);
  testUtils.runtestTrue (2.5 / 8 == 0.3125);

  testUtils.runtestTrue (2.0 + math.pi == 5.14159265358979); 
  testUtils.runtestTrue (math.pi + 2.0 == 5.14159265358979); 
  testUtils.runtestTrue (2 + math.pi == 5.14159265358979); 
  testUtils.runtestTrue (math.pi + 2 == 5.14159265358979);

  testUtils.runtestTrue (math.pi - 2 == 1.14159265358979); 
  testUtils.runtestTrue (math.pi - 2.0 == 1.14159265358979); 
  testUtils.runtestTrue (2 - math.pi == -1.14159265358979); 
  testUtils.runtestTrue (2.0 - math.pi == -1.14159265358979); 

  testUtils.runtestTrue (math.pi * 2 == 6.28318530717959);  
  testUtils.runtestTrue (2 * math.pi == 6.28318530717959); 
  testUtils.runtestTrue (math.pi * 2.0 == 6.28318530717959);  
  testUtils.runtestTrue (2.0 * math.pi == 6.28318530717959); 

  testUtils.runtestTrue (math.pi / 2 == 1.5707963267949); 
  testUtils.runtestTrue (math.pi / 2.0 == 1.5707963267949); 
  testUtils.runtestTrue (2/math.pi == 0.636619772367581); 
  testUtils.runtestTrue (2.0/math.pi == 0.636619772367581); 
testUtils.endTests()


testUtils.beginTests ("Precendence")
  // Precendence Tests
  testUtils.runtestTrue (5 * 4 + 2 == 22);
  testUtils.runtestTrue (2 + 5 * 4 == 22);
  testUtils.runtestTrue ((2 + 5) * 4 == 28);
  testUtils.runtestTrue (2 + 6/3 == 4);
  testUtils.runtestTrue (2 - 6/3 == 0);
  testUtils.runtestTrue (False == (2 < 1));
testUtils.endTests()


testUtils.beginTests ("Relational")
  // Relational

  x = 2;
  y = 3;

  testUtils.runtestTrue(x != y);
  testUtils.runtestTrue(True == (x < y))
  testUtils.runtestTrue(False == (x > y))
  testUtils.runtestTrue(True == (x <= y))
  testUtils.runtestTrue(False == (x >= y))
  testUtils.runtestTrue(False == (x == y))

  // Relational when dealing with int and float
  x = 95.6
  y = int (40)

  testUtils.runtestTrue(x != y);
  testUtils.runtestTrue(False == (x < y))
  testUtils.runtestTrue(True == (x > y))
  testUtils.runtestTrue(False == (x <= y))
  testUtils.runtestTrue(True == (x >= y))
  testUtils.runtestTrue(False == (x == y))
testUtils.endTests()


testUtils.beginTests ("Math Lib")
  // Math library test
  testUtils.runtestTrue (math.log (1000) == 3)
  testUtils.runtestTrue (math.log (100000) == 5)
  testUtils.runtestTrue (math.log (10000000) == 7)
  testUtils.runtestTrue (math.log (0.1) == -1)
  testUtils.runtestTrue (math.log (0.01) == -2)
  testUtils.runtestTrue (math.log (1E12) == 12)
  testUtils.runtestTrue (math.log (1E-6) == -6)

  testUtils.runtestTrue (math.pi == 3.14159265358979)
  testUtils.runtestTrue (math.e == 2.71828182845905)
  testUtils.runtestTrue (math.ln(math.e) == 1)
  testUtils.runtestTrue (math.round (4.3) == 4)
  testUtils.runtestTrue (math.round (4.7) == 5)
  testUtils.runtestTrue (math.ceil (4.1) == 5)
  testUtils.runtestTrue (math.ceil (-4.1) == -4)
  testUtils.runtestTrue (math.ceil (2.8) == 3)
  testUtils.runtestTrue (math.ceil (-2.8) == -2)
  testUtils.runtestTrue (math.floor (18.67) == 18)
  testUtils.runtestTrue (math.floor (18.01) == 18)
  testUtils.runtestTrue (math.floor (-18.67) == -19)
  testUtils.runtestTrue (math.floor (-18.01) == -19)
  testUtils.runtestTrue (math.abs (-4.1) == 4.1)
  testUtils.runtestTrue (math.abs (4.1) == 4.1)

  testUtils.runtestTrue (math.sqrt (9) == 3)
  testUtils.runtestTrue (math.sqrt (25) == 5)
  testUtils.runtestTrue (math.sqrt (64) == 8)

  testUtils.runtestTrue (math.max (64, 23) == 64)
  testUtils.runtestTrue (math.max (-18, -17) == -17)
  testUtils.runtestTrue (math.max (64.34, 23.67) == 64.34)
  testUtils.runtestTrue (math.max (-18.01, -17.67) == -17.67)
  testUtils.runtestTrue (math.min (64.34, 23.67) == 23.67)
  testUtils.runtestTrue (math.min (-18.01, -17.1) == -18.01)
  testUtils.runtestTrue (math.toDegrees (math.pi) == 180)
  testUtils.runtestTrue (math.toRadians (180) == math.pi)

  testUtils.runtestTrue (math.toRadians (90) == math.pi/2)
  
  // math.pi/3 = 60 degrees
  testUtils.runtestTrue (math.sin (math.pi/3) == 0.866025403784439)
  testUtils.runtestTrue (math.cos (math.pi/3) == 0.5)  
  testUtils.runtestTrue (math.tan (math.pi/3) == 1.73205080756888)  
  testUtils.runtestTrue (math.acos (0.2) == 1.36943840600457)  
  testUtils.runtestTrue (math.asin (0.2) == 0.201357920790331)
  testUtils.runtestTrue (math.atan (0.2) == 0.197395559849881)

  testUtils.runtestTrue (math.cos (math.pi) == -1)
  testUtils.runtestTrue (math.sin (math.pi) == 0)
  testUtils.runtestTrue (math.tan (math.pi) == 0)
  testUtils.runtestTrue (math.sqrt (math.pi) == 1.77245385090552)
  testUtils.runtestTrue (math.sqr (math.pi) == 9.86960440108936)
testUtils.endTests()

setColor ("yellow")
println ("----------------------------------------------------------")
setColor ("white")


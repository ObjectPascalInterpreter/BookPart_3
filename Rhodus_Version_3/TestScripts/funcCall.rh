
import testUtils

setColor("yellow")
println ("------------------ Function Call Tests --------------------")
setColor("white")

testUtils.beginTests ("No Argument Functions")
testUtils.runtestTrue(True);

// Tests to show that functions can return the different types are in simplefunc.rh

function test
end


function test_1()
   astr = "1234";
   astr[2] = "9";
   return astr
end;
testUtils.runtestTrue(test_1() == "1294");

function test_2()
   astr = "1234";
   return astr + astr
end;
testUtils.runtestTrue(test_2() == "12341234");


function test_3()
   str1 = "1234";
   str2 = "4321";
   return str1 + str2
end;
testUtils.runtestTrue(test_3() == "12344321");


function test_4()
   c = 1.1;
   while True do
     x = c + 0.1;
     return x
   end;
end;
testUtils.runtestTrue(test_4() == 1.2);


function test_5()
   for i = 1 to 10 do
     if i == 5 then
       return {5, 12345}
     end;
   end;
end;
testUtils.runtestTrue(test_5() == {5, 12345});


function test_6()
   x = 6; 
   if x == 5 then
      x = 0
   else
      return 123456;
   end;
end;
testUtils.runtestTrue (test_6() == 123456);

function test_7()
  a = {1,2,3,4};
  a[2] = 1;
  return a
end;
testUtils.runtestTrue (test_7() == {1,2,1,4});

function test_8()
  a = {1,2,3,4,5,{6,7,8}};
  a[5,0] = 99;
  return a
end;
testUtils.runtestTrue (test_8() == {1,2,3,4,5,{99,7,8}});
testUtils.endTests()

//----------------------------------------------------
testUtils.beginTests ("Scoping Tests")
// Testing scoping rules functionality

x = 1.2

function testScoping_1 ()
   x = 4.5;   
end;
testScoping_1();
testUtils.runtestTrue (x == 1.2);

function testScoping_2 ()
   y = x;
   return y   
end;
testUtils.runtestTrue (testScoping_2() == 1.2)
testUtils.endTests()



testUtils.beginTests ("Simple Argument Tests")
function testArg_1 (a)
  return a
end
testUtils.runtestTrue (testArg_1 (5) == 5)


function testArg_2 (a, b, c)
  return a+b+c
end
testUtils.runtestTrue (testArg_2 (5, 8, 10) == 23)


function testArg_3 (x)
   return x*x
end

function call_3 (x)
   y = testArg_3 (x)
   return y
end

testUtils.runtestTrue (call_3 (9) == 81)

testUtils.endTests()


// -----------------------------------------------
// Other Examples

testUtils.beginTests ("Arguments with Functions")
function returnValue (x)
   a = x;
   return a;
end;

x = returnValue(11);
testUtils.runtestTrue (x == 11);


function mean (x)
  sum = 0
  for i = 0 to x.len () - 1 do
      sum = sum + x[i]
  end
  return sum/5
end
testUtils.runtestTrue (mean ({1,2,3,4,5}) == 3)

function repeatString(count, text)
   ret = "";
 
   for i = 1 To count do
      ret = ret + text
   end;
   return ret;
end;
 
testUtils.runtestTrue (repeatString(5, "ha") == "hahahahaha");

function lots (a, b, c, d, e, f)
   x = a + b + c + d + e + f
   return x
end
testUtils.runtestTrue (lots (1, 2, 3, 4, 5, 6) == 21)

testUtils.endTests ()


testUtils.beginTests("More Complex Functions")

// Check if n is a prime
function IsPrime (n)
  if n == 1 then
     return False
  end;
  for m = 2 to (n div 2) do
    if n mod m == 0 then
      return False
    end
  end;
  return True;
end;

testUtils.runtestTrue (IsPrime (99809) == True);
testUtils.runtestTrue (not (IsPrime (100) == True));

testUtils.endTests()



testUtils.beginTests("Recursion")

// Compute factorial
function fac(x)
  if x <= 0 then
     return (1);
  end;
  return (x*fac(x-1));
end;

testUtils.runtestTrue (fac(7) == 5040);
testUtils.runtestTrue (fac(10) == 3628800);


// A highly recursive function
function ack (x, y)
  if x == 0 then
     return (y+1);
  end;
  if y == 0 then
     return (ack(x-1, 1));
  end;
  return (ack(x-1, ack(x, y-1)));
end;

testUtils.runtestTrue (ack (3, 6) == 509);

testUtils.endTests()


testUtils.beginTests("Functions Calling Functions")

// Compute the greatest common divisor
function gcd (x,y)
    r = x mod y;
    while r > 0 do
        r = x mod y;
        if r == 0 then 
           return y;
        else
            q = y; x = q; y = r;
        end;
    end;
end;

r = gcd (1071,1029); testUtils.runtestTrue (r == 21); 
r = gcd (5538,1105); testUtils.runtestTrue (r == 13); 
r = gcd (8764,7732); testUtils.runtestTrue (r == 4); 


function combin(n, k)
    return fac (n)/(fac (k)*fac (n-k))
end;

function permut(n, k)
    return combin(n,k)*fac(k)
end;

testUtils.runtestTrue (combin (7,2) == 21);
testUtils.runtestTrue (permut (7,2) == 42);


// One function calling another
function add (a, b)
    return a + b
end;

function sumOfAdds (a, b)
    return add (a, b) + add (a, b)
end;

testUtils.runtestTrue (sumOfAdds (2, 4) == 12);


function repeatString(count, text)
   ret = "";
 
   for i = 1 To count do
      ret = ret + text
   end;
   return ret;
end;
 
testUtils.runtestTrue (repeatString(5, "ha") == "hahahahaha");

testUtils.endTests()


testUtils.beginTests("Period Syntax")

// Test period syntax and index of lists containing methods

function abc
   return 5
end

x = {abc}
testUtils.runtestTrue (x[0]() == 5)

r = {math.sin (30), math.cos (30), math.tan (30)};

x = {math.sin, math.cos, math.tan};

testUtils.runtestTrue (r[0] == x[0](30));
testUtils.runtestTrue (r[1] == x[1](30));
testUtils.runtestTrue (r[2] == x[2] (30));

for i = 0 to 2 do
    testUtils.runtestTrue (r[i] == x[i](30));  
end

for i = 0 to 2 do
    y = x[i]
    testUtils.runtestTrue (r[i] == y(30))  
end

// And user defined funtions
function test (x) return x*x; end

x = {test}
testUtils.runtestTrue (3*3 == x[0](3));

function runtest (fcn, x)
   return fcn (x)
end

function testlog (x)
   a = {math.log}
   return a[0](x)
end

testUtils.runtestTrue (testlog (100) == 2)

function t1 (x) return {1,2,3} + x end
function t2 (y) return t1 (y) end

testUtils.runtestTrue (t2 (25) == {1,2,3,25})

testUtils.endTests()

setColor ("yellow")
println ("----------------------------------------------------------")
setColor ("white")


/*------------------------------------
/* There is no way to test memory leaks?
testUtils.beginTests ("")
// Memory leak test for strings
function test_9()
   a = "str";
   b = a;
   b = 1;
end;

test_9();

testUtils.runtestTrue (True);  // just record we did the test


// Memory leak test for lists
function test_10()
   a = {1,2,3};
   b = a;
   b = 1;
end;

test_10();
testUtils.runtestTrue (True);  // just record we did the test
testUtils.endTests()
------------------------------------ */
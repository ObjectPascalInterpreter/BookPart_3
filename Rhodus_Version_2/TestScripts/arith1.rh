
// Simple Arithmetic tests

assertTrue (1E2 == 100);
assertTrue (1.2E2 == 120); 
assertTrue (0.1E2 == 10); 
assertTrue (1E-2 == 0.01); 
assertTrue (1.2E-2 == 0.012); 
assertTrue (-1E-2 == -0.01);

assertTrue (2 + 3 == 5);
assertTrue (2 - 3 == -1);
assertTrue (3 - 2 == 1);
assertTrue (2 * 3 == 6);
assertTrue (10 / 2 == 5);
assertTrue (2^4 == 16);

// Integer tests
a = 2; b = 5;
assertTrue  (a == 2);
assertTrue  (b == 5);
assertTrue  (a + b == 7);
assertTrue  (b + a == 7);  
assertTrue  (a - b == -3); 
assertTrue  (b - a == 3);
assertTrue  (a * b == 10); 
assertTrue  (b * a == 10); 
assertTrue  (b / a == 2.5);
assertTrue  (a / b == 0.4);
assertTrue  (b div a == 2);  // div = integer divide 
assertTrue  (b mod 1 == 0);
assertTrue  (b mod 2 == 1);
assertTrue  (b mod 3 == 2);

// Float tests for mod, note == takes
// into account rounding errors by using
// the built in Delphi method sameValue
assertTrue  (34 mod 2.4 == 0.4)
assertTrue  (34.5 mod 2.3 == 0.0)
assertTrue  (36.6 mod 4 == 0.6)
assertTrue  (34.6 mod 4 == 2.6)

// Double tests
a = 2.5; b = 5.5;
assertTrue (a + b == 8.0);  
assertTrue (b + a == 8.0);  
assertTrue (a - b == -3.0);
assertTrue (b - a == 3.0);
assertTrue (a * b == 13.75);
assertTrue (b * a == 13.75); 
assertTrue (b / a == 2.2); 
b = 7.5;
assertTrue (a / b == 1/3); 
a = 1.5; b = 2.0;
assertTrue (a^b == 2.25);

a = 123.456;
assertTrue (a == 123.456);
a = 0.0001;
assertTrue (a == 0.0001);
a = -0.0001;
assertTrue (a == -0.0001);
a = 123.;
assertTrue (a == 123.);
a = 0.987;
assertTrue (a == 0.987);

// Mixed
assertTrue (8 / 2.5 == 3.2);
assertTrue (2.5 / 8 == 0.3125);

// Precendence Tests
assertTrue (5 * 4 + 2 == 22);
assertTrue (2 + 5 * 4 == 22);
assertTrue ((2 + 5) * 4 == 28);
assertTrue (2 + 6/3 == 4);
assertTrue (2 - 6/3 == 0);
assertTrue (False == (2 < 1));




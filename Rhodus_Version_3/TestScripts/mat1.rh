import testUtils
import mat


println ("Program Start") 
println ("-------------")  

println ("Create Square Matrix") 

m1 = mat.matrix (4,4)

println ("Assign Values to Matrix") 

m1[0,0] = 0.0  m1[0,1] = 0.1  m1[0,2] = 0.2  m1[0,3] = 0.3 
m1[1,0] = 1.0  m1[1,1] = 1.1  m1[1,2] = 1.2  m1[1,3] = 1.3 
m1[2,0] = 2.0  m1[2,1] = 2.1  m1[2,2] = 2.2  m1[2,3] = 2.3 
m1[3,0] = 3.0  m1[3,1] = 3.1  m1[3,2] = 3.2  m1[3,3] = 3.3 

println ("Access Values from Matrix") 

testUtils.runtestTrue (m1[0,0] == 0.0)
testUtils.runtestTrue (m1[1,0] == 1.0)
testUtils.runtestTrue (m1[2,0] == 2.0) 
testUtils.runtestTrue (m1[3,0] == 3.0) 

testUtils.runtestTrue (m1[0,1] == 0.1) 
testUtils.runtestTrue (m1[1,1] == 1.1) 
testUtils.runtestTrue (m1[2,1] == 2.1) 
testUtils.runtestTrue (m1[3,1] == 3.1) 

testUtils.runtestTrue (m1[0,2] == 0.2) 
testUtils.runtestTrue (m1[1,2] == 1.2) 
testUtils.runtestTrue (m1[2,2] == 2.2) 
testUtils.runtestTrue (m1[3,2] == 3.2) 

testUtils.runtestTrue (m1[0,3] == 0.3) 
testUtils.runtestTrue (m1[1,3] == 1.3) 
testUtils.runtestTrue (m1[2,3] == 2.3) 
testUtils.runtestTrue (m1[3,3] == 3.3) 

println()
println ("Create Non-Square Matrix") 

m1 = mat.matrix (2,4) 

println ("Assign Values to Matrix") 

m1[0,0] = 0.0  m1[0,1] = 0.1  m1[0,2] = 0.2  m1[0,3] = 0.3 
m1[1,0] = 1.0  m1[1,1] = 1.1  m1[1,2] = 1.2  m1[1,3] = 1.3 

println ("Access Values from Matrix") 

testUtils.runtestTrue (m1[0,0] == 0.0) 
testUtils.runtestTrue (m1[1,0] == 1.0) 

testUtils.runtestTrue (m1[0,1] == 0.1) 
testUtils.runtestTrue (m1[1,1] == 1.1) 

testUtils.runtestTrue (m1[0,2] == 0.2) 
testUtils.runtestTrue (m1[1,2] == 1.2) 

testUtils.runtestTrue (m1[0,3] == 0.3) 
testUtils.runtestTrue (m1[1,3] == 1.3) 


// Test Some Matrix Functions

//println ("Matrix function tests");

println()
println ("Test Matrix Slicing");

m = {{1,2,3},{4,5,6},{7,8,9}}

testUtils.runtestTrue (m[0,1] == 2);
testUtils.runtestTrue (m[1,1] == 5);
testUtils.runtestTrue (m[2,1] == 8);


testUtils.runtestTrue (m[0:1,1] == {{2},{5}})
testUtils.runtestTrue (m[0:2,1] == {{2},{5},{8}})
testUtils.runtestTrue (m[0:1,2] == {{3},{6}})
testUtils.runtestTrue (m[0:2,2] == {{3},{6},{9}})

testUtils.runtestTrue (m[0,0:1] == {{1,2}})
testUtils.runtestTrue (m[0,0:2] == {{1,2,3}})
testUtils.runtestTrue (m[1:2,1:2] == {{5,6},{8,9}})

testUtils.runtestTrue (m[0:0] == {{1,2,3}})
testUtils.runtestTrue (m[0:1] == {{1,2,3},{4,5,6}})
testUtils.runtestTrue (m[0:2] == {{1,2,3},{4,5,6},{7,8,9}})


testUtils.runtestTrue (m[0:99] == {{1,2,3},{4,5,6},{7,8,9}})
testUtils.runtestTrue (m[0:99,0:99] == {{1,2,3},{4,5,6},{7,8,9}})

testUtils.runtestTrue (m[:,:] == {{1,2,3},{4,5,6},{7,8,9}})
testUtils.runtestTrue (m[:,0:1] == {{1,2},{4,5},{7,8}})
testUtils.runtestTrue (m[0:1,:] == {{1,2,3},{4,5,6}})


testUtils.runtestTrue (m[1:2,:] == {{4,5,6},{7,8,9}})
testUtils.runtestTrue (m[1:2] == {{4,5,6},{7,8,9}})
testUtils.runtestTrue (m[:,1:2] == {{2,3},{5,6},{8,9}})

x = 1;
y = 2;
testUtils.runtestTrue (m[:,x:y] == {{2,3},{5,6},{8,9}})


println()







// -----------------------------------------------
// Other Examples


x = 4

// Compute factorial
function fac(x)
  if x <= 0 then
     return (1);
  end;
  return (x*fac(x-1));
end;

assertTrue (fac(7) == 5040);
assertTrue (fac(10) == 3628800);

// A highly recursive function
function ack (x, y)
  if x == 0 then
     return (y+1);
  end;
  if y == 0 then
     return (ack(x-1, 1));
  end;
  return (ack(x-1, ack(x, y-1)));
end;


assertTrue (ack (3, 6) == 509);

// Compute the greatest common divisor
function gcd (x,y)
    r = x mod y;
    while r > 0 do
        r = x mod y;
        if r == 0 then 
           return y;  per
        else
            q = y; x = q; y = r;
        end;
    end;
end;

r = gcd (1071,1029); assertTrue (r == 21); 
r = gcd (5538,1105); assertTrue (r == 13); 
r = gcd (8764,7732); assertTrue (r == 4); 


function combin(n, k)
    return fac (n)/(fac (k)*fac (n-k))
end;

function permut(n, k)
    return combin(n,k)*fac(k)
end;

assertTrue (combin (7,2) == 21);
assertTrue (permut (7,2) == 42);


// One function calling another
function add (a, b)
    return a + b
end;

function sumOfAdds (a, b)
    return add (a, b) + add (a, b)
end;

assertTrue (sumOfAdds (2, 4) == 12);

